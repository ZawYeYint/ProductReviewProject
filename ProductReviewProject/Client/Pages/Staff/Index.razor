@page "/staffs"
@inject HttpClient _client
@inject IJSRuntime js
@inject NavigationManager navManager
@inject HttpInterceptorService _interceptor
@implements IDisposable
@attribute [Authorize]


<h3 class="card-title">Staff Staffs</h3>
<a href="/staffs/create" class="btn btn-secondary">
	<span class="oi oi-plus"></span>
	Create New Staff
</a>
<br />
<br />

@if (Staffs == null)
{
	<div class="alert alert-info">Loading Makes...</div>
}

else
{
	<table class="table table-responsive">
		<thead>

		<th>Name</th>
		<th>Contact</th>
		<th>EmailAddress</th>
		<th>Actions</th>

		</thead>

		<tbody>
			@foreach (var staff in Staffs)
			{
				<tr>
					<td>@staff.Name</td>
					<td>@staff.Contact</td>
					<td>@staff.StaffEmail</td>

					<td>

						<a href="/staffs/view/@staff.Id" class="btn btn-primary">
							<span class="oi oi-book"></span>
						</a>

						<a href="/staffs/edit/@staff.Id" class="btn btn-warning">
							<span class="oi oi-pencil"></span>
						</a>

						<button class="btn btn-danger" @onclick="@(()=>Delete(staff.Id))">
							<span class="oi oi-delete"></span>

						</button>
					</td>

				</tr>
			}
		</tbody>
	</table>

}
<br />

@code
{
	private List<Staff>? Staffs;


	protected async override Task OnInitializedAsync()
	{
		_interceptor.MonitorEvent();
		Staffs = await _client.GetFromJsonAsync<List<Staff>>($"{Endpoints.StaffsEndpoint}");
	}


	async Task Delete(int staffId)
	{
		if (Staffs != null)
		{
			var staff = Staffs.First(q => q.Id == staffId);
			var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete{staff.Name}?");

			if (confirm)
			{
				await _client.DeleteAsync($"{Endpoints.StaffsEndpoint}/{staffId}");
				await OnInitializedAsync();
			}
		}
	}

	public void Dispose()
	{
		_interceptor.DisposeEvent();
	}
}




