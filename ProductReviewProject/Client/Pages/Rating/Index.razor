@page "/ratings"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]


<h3 class="card-title">Rating Ratings</h3>

@if (Ratings == null)
{
	<div class="alert alert-info">Loading Makes...</div>
}

else
{
	<table class="table table-responsive">
		<thead>

		<th>Value</th>
		<th>Description</th>
		<th>Actions</th>

		</thead>

		<tbody>
			@foreach (var rating in Ratings)
			{
				<tr>
					<td>@rating.Value</td>
					<td>@rating.Description</td>

					<td>

						<a href="/ratings/view/@rating.Id" class="btn btn-primary">
							<span class="oi oi-book"></span>
						</a>

						<a href="/ratings/edit/@rating.Id" class="btn btn-warning">
							<span class="oi oi-pencil"></span>
						</a>

						<button class="btn btn-danger" @onclick="@(()=>Delete(rating.Id))">
							<span class="oi oi-delete"></span>

						</button>
					</td>

				</tr>
			}
		</tbody>
	</table>

}
<br />

@code
{
	private List<Rating>? Ratings;


	protected async override Task OnInitializedAsync()
	{
		Ratings = await _client.GetFromJsonAsync<List<Rating>>($"{Endpoints.RatingsEndpoint}");
	}


	async Task Delete(int ratingId)
	{
		if (Ratings != null)
		{
			var rating = Ratings.First(q => q.Id == ratingId);
			var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete{rating.Description}?");

			if (confirm)
			{
				await _client.DeleteAsync($"{Endpoints.RatingsEndpoint}/{ratingId}");
				await OnInitializedAsync();
			}
		}
	}
}




