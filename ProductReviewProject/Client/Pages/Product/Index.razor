@page "/products"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]


<h3 class="card-title">Product Products</h3>

<a href="/products/create" class="btn btn-secondary">
	<span class="oi oi-plus"></span>
	Create New Product
</a>
<br />
<br />

@if(Products == null)
{
	<div class="alert alert-info">Loading Makes...</div>
}

else
{
	<table class="table table-responsive">
		<thead>

			<th>Name</th>
			<th>Actions</th>

		</thead>

		<tbody>
			@foreach (var product in Products)
			{
			<tr>
				<td>@product.Name</td>

				<td>

					<a href="/products/view/@product.Id" class="btn btn-primary">
						<span class="oi oi-book"></span>
					</a>

					<a href="/products/edit/@product.Id" class="btn btn-warning">
						<span class="oi oi-pencil"></span>
					</a>

					<button class= "btn btn-danger" @onclick= "@(()=>Delete(product.Id))">
						<span class="oi oi-delete"></span>

						</button>
				</td>

			</tr>
		}
		</tbody>
	</table>

}
<br />

@code
{
	private List<Product>? Products;


	protected async override Task OnInitializedAsync()
	{
		Products = await _client.GetFromJsonAsync<List<Product>>($"{Endpoints.ProductsEndpoint}");
	}


	async Task Delete(int productId)
	{
		if (Products != null)
		{
			var product = Products.First(q => q.Id == productId);
			var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete{product.Name}?");

			if (confirm)
			{
				await _client.DeleteAsync($"{Endpoints.ProductsEndpoint}/{productId}");
				await OnInitializedAsync();
			}
		}
	}
}




