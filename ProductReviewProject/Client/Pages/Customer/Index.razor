@page "/customers"
@inject HttpClient _client
@inject IJSRuntime js
@inject AuthenticationStateProvider AuthenticationStateProvider
@implements IDisposable
@attribute [Authorize]

<h3 class="card-title">Customer Customers</h3>

<a href="/customers/create" class="btn btn-secondary">
	<span class="oi oi-plus"></span>
	Create New Customer1
</a>
<br />
<br />

@if (Customers == null)
{
	<div class="alert alert-info">Loading Makes...</div>
}

else
{
	<table class="table table-responsive"id="customersTable">
		<thead>

		<th>Name</th>
		<th>Contact</th>
		<th>Email Address</th>
		<th>Actions</th>

		</thead>

		<tbody>
			@foreach (var customer in Customers)
			{
				<tr>
					<td>@customer.Name</td>
					<td>@customer.Contact</td>
					<td>@customer.CustomerEmail</td>

					<td>

						<a href="/customers/view/@customer.Id" class="btn btn-primary">
							<span class="oi oi-book"></span>
						</a>

						<a href="/customers/edit/@customer.Id" class="btn btn-warning">
							<span class="oi oi-pencil"></span>
						</a>

						<button class="btn btn-danger" @onclick="@(()=>Delete(customer.Id))">
							<span class="oi oi-delete"></span>

						</button>
					</td>

				</tr>
			}
		</tbody>
	</table>

}
<br />


@code
{
	private List<Customer>? Customers;


	

	


	protected async override Task OnInitializedAsync()
	{
		var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
		var user = authState.User;

		foreach (var claim in user.Claims)
		{
			Console.WriteLine($"Claim Type: {claim.Type}, Claim Value: {claim.Value}");
		}

		Customers = await _client.GetFromJsonAsync<List<Customer>>($"{Endpoints.CustomersEndpoint}");
	}


	async Task Delete(int customerId)
	{
		if (Customers != null)
		{
			var customer = Customers.First(q => q.Id == customerId);
			var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete{customer.Name}?");

			if (confirm)
			{
				await _client.DeleteAsync($"{Endpoints.CustomersEndpoint}/{customerId}");
				await OnInitializedAsync();
			}
		}
	}




	protected async override Task OnAfterRenderAsync(bool firstRender)
	{
		await js.InvokeVoidAsync("AddDataTable", "#customersTable");
	}

	public void Dispose()
	{
		js.InvokeVoidAsync("DataTablesDispose", "#customersTable");
	}
}




