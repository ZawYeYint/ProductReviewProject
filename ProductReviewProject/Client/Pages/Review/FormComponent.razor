@inject HttpClient _client
<EditForm Model="@review" OnValidSubmit="OnValidSubmit">
	<DataAnnotationsValidator />
	<ValidationSummary />
	<fieldset disabled="@Disabled">
	<div class=" form-group">
		<label>Description: </label>
		<div>
			<InputText @bind-Value="@review.Description" class="form-control" />
			<ValidationMessage For="@(() => review.Description)" />
		</div>
		</div>

	<div class=" form-group">
		<label>Products: </label>
		<div>
			<InputSelect @bind-Value="review.ProductId" class="form-control">
				<option value=" ">-- Select Product--</option>
				@if (Products != null)
				{
					foreach (var product in Products)
					{
						<option value="@product.Id">@product.Name</option>
					}
				}
			</InputSelect>
			<ValidationMessage For="@(() => review.ProductId)" />
		</div>
		</div>

	<div class=" form-group">
		<label>Customer: </label>
		<div>
			<InputSelect @bind-Value="review.CustomerId" class="form-control">
				<option value=" ">-- Select Customer--</option>
				@if (Customers != null)
				{
					foreach (var customer in Customers)
					{
						<option value="@customer.Id">@customer.Name</option>
					}
				}
			</InputSelect>
			<ValidationMessage For="@(() => review.CustomerId)" />
		</div>
	</div>
	</fieldset>

	@if (!Disabled)
	{
		<button type="submit" class="btn btn-success btn-block">
			@ButtonText
	</button>
	}
	
	<BackToList Target="reviews" />
</EditForm>


@code 
{
	[Parameter] public bool Disabled { get; set; } = false;
	[Parameter] public Review? review { get; set; }
	[Parameter] public string ButtonText { get; set; } = "Save";
	[Parameter] public EventCallback OnValidSubmit { get; set; }

	private IList<Customer>? Customers;
	private IList<Product>? Products;
	protected async override Task OnInitializedAsync()
	{

		Customers = await _client.GetFromJsonAsync<List<Customer>>($"{Endpoints.CustomersEndpoint}");
		Products = await _client.GetFromJsonAsync<List<Product>>($"{Endpoints.ProductsEndpoint}");
	}

}
