@page "/reviews/"
@inject HttpClient _client
@inject IJSRuntime js
@inject NavigationManager navManager
@inject HttpInterceptorService _interceptor
@implements IDisposable
@attribute [Authorize]


<h3 class="card-title">Product Reviews</h3>

<a href="/reviews/create" class="btn btn-secondary">
	<span class="oi oi-plus"></span>
	Create New Review
</a>
<br />
<br />

@if (Reviews == null)
{
	<div class="alert alert-info">Loading Makes...</div>
}

else
{
	<table class="table table-responsive" id="reviewsTable">
		<thead>

		<th>Description</th>
		<th>Product</th>
		<th>Customer</th>
		<th>Actions</th>

		</thead>

		<tbody>
			@foreach (var review in Reviews)
			{
				<tr>
					<td>@review.Description</td>
					<td>@review.Product?.Name</td>
					<td>@review.Customer?.Name</td>



					<td>

						<a href="/reviews/view/@review.Id" class="btn btn-primary">
							<span class="oi oi-book"></span>
						</a>

						<a href="/reviews/edit/@review.Id" class="btn btn-warning">
							<span class="oi oi-pencil"></span>
						</a>

						<button class="btn btn-danger" @onclick="@(()=>Delete(review.Id))">
							<span class="oi oi-delete"></span>

						</button>
					</td>

				</tr>
			}
		</tbody>
	</table>

}
<br />

@code
{
	private List<Review>? Reviews;


	protected async override Task OnInitializedAsync()
	{
		_interceptor.MonitorEvent();
		Reviews = await _client.GetFromJsonAsync<List<Review>>($"{Endpoints.ReviewsEndpoint}");
	}


	async Task Delete(int reviewId)
	{
		if (Reviews != null)
		{
			var review = Reviews.First(q => q.Id == reviewId);
			var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete{review.Description}?");

			if (confirm)
			{
				await _client.DeleteAsync($"{Endpoints.ReviewsEndpoint}/{reviewId}");
				await OnInitializedAsync();
			}
		}
	}
	protected async override Task OnAfterRenderAsync(bool firstRender)
	{
		await js.InvokeVoidAsync("AddDataTable", "#reviewsTable");
	}

	public void Dispose()
	{
		js.InvokeVoidAsync("DataTablesDispose", "#reviewsTable");
	}
}




